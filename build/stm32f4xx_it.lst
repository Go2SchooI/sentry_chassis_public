ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB130:
  28              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f4xx_it.c **** /**
   3:Src/stm32f4xx_it.c ****  ******************************************************************************
   4:Src/stm32f4xx_it.c ****  * @file    stm32f4xx_it.c
   5:Src/stm32f4xx_it.c ****  * @brief   Interrupt Service Routines.
   6:Src/stm32f4xx_it.c ****  ******************************************************************************
   7:Src/stm32f4xx_it.c ****  * @attention
   8:Src/stm32f4xx_it.c ****  *
   9:Src/stm32f4xx_it.c ****  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Src/stm32f4xx_it.c ****  * All rights reserved.</center></h2>
  11:Src/stm32f4xx_it.c ****  *
  12:Src/stm32f4xx_it.c ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f4xx_it.c ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f4xx_it.c ****  * the License. You may obtain a copy of the License at:
  15:Src/stm32f4xx_it.c ****  *                             www.st.com/SLA0044
  16:Src/stm32f4xx_it.c ****  *
  17:Src/stm32f4xx_it.c ****  ******************************************************************************
  18:Src/stm32f4xx_it.c ****  */
  19:Src/stm32f4xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f4xx_it.c **** 
  21:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f4xx_it.c **** #include "main.h"
  23:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  24:Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f4xx_it.c **** #include "bsp_usart_idle.h"
  27:Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  28:Src/stm32f4xx_it.c **** 
  29:Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 2


  31:Src/stm32f4xx_it.c **** 
  32:Src/stm32f4xx_it.c **** /* USER CODE END TD */
  33:Src/stm32f4xx_it.c **** 
  34:Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  36:Src/stm32f4xx_it.c **** 
  37:Src/stm32f4xx_it.c **** /* USER CODE END PD */
  38:Src/stm32f4xx_it.c **** 
  39:Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  41:Src/stm32f4xx_it.c **** 
  42:Src/stm32f4xx_it.c **** /* USER CODE END PM */
  43:Src/stm32f4xx_it.c **** 
  44:Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  46:Src/stm32f4xx_it.c **** 
  47:Src/stm32f4xx_it.c **** /* USER CODE END PV */
  48:Src/stm32f4xx_it.c **** 
  49:Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  51:Src/stm32f4xx_it.c **** 
  52:Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  53:Src/stm32f4xx_it.c **** 
  54:Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  56:Src/stm32f4xx_it.c **** 
  57:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  58:Src/stm32f4xx_it.c **** 
  59:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  61:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan2;
  62:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  63:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  64:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_tx;
  65:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_rx;
  66:Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart1;
  67:Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart3;
  68:Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart6;
  69:Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim2;
  70:Src/stm32f4xx_it.c **** 
  71:Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  72:Src/stm32f4xx_it.c **** 
  73:Src/stm32f4xx_it.c **** /* USER CODE END EV */
  74:Src/stm32f4xx_it.c **** 
  75:Src/stm32f4xx_it.c **** /******************************************************************************/
  76:Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  77:Src/stm32f4xx_it.c **** /******************************************************************************/
  78:Src/stm32f4xx_it.c **** /**
  79:Src/stm32f4xx_it.c ****  * @brief This function handles Non maskable interrupt.
  80:Src/stm32f4xx_it.c ****  */
  81:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  82:Src/stm32f4xx_it.c **** {
  29              		.loc 1 82 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 3


  83:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  84:Src/stm32f4xx_it.c **** 
  85:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  86:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  87:Src/stm32f4xx_it.c **** 
  88:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  89:Src/stm32f4xx_it.c **** }
  34              		.loc 1 89 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE130:
  39              		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.global	HardFault_Handler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	HardFault_Handler:
  47              	.LFB131:
  90:Src/stm32f4xx_it.c **** 
  91:Src/stm32f4xx_it.c **** /**
  92:Src/stm32f4xx_it.c ****  * @brief This function handles Hard fault interrupt.
  93:Src/stm32f4xx_it.c ****  */
  94:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  95:Src/stm32f4xx_it.c **** {
  48              		.loc 1 95 1 view -0
  49              		.cfi_startproc
  50              		@ Volatile: function does not return.
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53 0000 08B5     		push	{r3, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 3, -8
  57              		.cfi_offset 14, -4
  58              	.L3:
  96:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  97:Src/stm32f4xx_it.c **** 
  98:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  99:Src/stm32f4xx_it.c ****   while (1)
  59              		.loc 1 99 3 discriminator 1 view .LVU3
 100:Src/stm32f4xx_it.c ****   {
 101:Src/stm32f4xx_it.c ****     __set_FAULTMASK(1);
  60              		.loc 1 101 5 discriminator 1 view .LVU4
  61              	.LVL0:
  62              	.LBB4:
  63              	.LBI4:
  64              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 4


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 5


  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 6


 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 7


 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 8


 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 9


 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 10


 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 11


 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 12


 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 13


 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
  65              		.loc 2 557 27 discriminator 1 view .LVU5
  66              	.LBB5:
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
  67              		.loc 2 559 3 discriminator 1 view .LVU6
  68 0002 0123     		movs	r3, #1
  69              		.syntax unified
  70              	@ 559 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  71 0004 83F31388 		MSR faultmask, r3
  72              	@ 0 "" 2
  73              	.LVL1:
  74              		.loc 2 559 3 is_stmt 0 discriminator 1 view .LVU7
  75              		.thumb
  76              		.syntax unified
  77              	.LBE5:
  78              	.LBE4:
 102:Src/stm32f4xx_it.c ****     HAL_NVIC_SystemReset();
  79              		.loc 1 102 5 is_stmt 1 discriminator 1 view .LVU8
  80 0008 FFF7FEFF 		bl	HAL_NVIC_SystemReset
  81              	.LVL2:
  99:Src/stm32f4xx_it.c ****   {
  82              		.loc 1 99 9 discriminator 1 view .LVU9
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 14


  83 000c F9E7     		b	.L3
  84              		.cfi_endproc
  85              	.LFE131:
  87              		.section	.text.MemManage_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	MemManage_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	MemManage_Handler:
  95              	.LFB132:
 103:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 104:Src/stm32f4xx_it.c ****     //		wait();
 105:Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 106:Src/stm32f4xx_it.c ****   }
 107:Src/stm32f4xx_it.c **** }
 108:Src/stm32f4xx_it.c **** 
 109:Src/stm32f4xx_it.c **** /**
 110:Src/stm32f4xx_it.c ****  * @brief This function handles Memory management fault.
 111:Src/stm32f4xx_it.c ****  */
 112:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 113:Src/stm32f4xx_it.c **** {
  96              		.loc 1 113 1 view -0
  97              		.cfi_startproc
  98              		@ Volatile: function does not return.
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.L6:
 114:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 115:Src/stm32f4xx_it.c **** 
 116:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 117:Src/stm32f4xx_it.c ****   while (1)
 103              		.loc 1 117 3 discriminator 1 view .LVU11
 118:Src/stm32f4xx_it.c ****   {
 119:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 120:Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 121:Src/stm32f4xx_it.c ****   }
 104              		.loc 1 121 3 discriminator 1 view .LVU12
 117:Src/stm32f4xx_it.c ****   {
 105              		.loc 1 117 9 discriminator 1 view .LVU13
 106 0000 FEE7     		b	.L6
 107              		.cfi_endproc
 108              	.LFE132:
 110              		.section	.text.BusFault_Handler,"ax",%progbits
 111              		.align	1
 112              		.global	BusFault_Handler
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 117              	BusFault_Handler:
 118              	.LFB133:
 122:Src/stm32f4xx_it.c **** }
 123:Src/stm32f4xx_it.c **** 
 124:Src/stm32f4xx_it.c **** /**
 125:Src/stm32f4xx_it.c ****  * @brief This function handles Pre-fetch fault, memory access fault.
 126:Src/stm32f4xx_it.c ****  */
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 15


 127:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 128:Src/stm32f4xx_it.c **** {
 119              		.loc 1 128 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L8:
 129:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 130:Src/stm32f4xx_it.c **** 
 131:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 132:Src/stm32f4xx_it.c ****   while (1)
 126              		.loc 1 132 3 discriminator 1 view .LVU15
 133:Src/stm32f4xx_it.c ****   {
 134:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 135:Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 136:Src/stm32f4xx_it.c ****   }
 127              		.loc 1 136 3 discriminator 1 view .LVU16
 132:Src/stm32f4xx_it.c ****   {
 128              		.loc 1 132 9 discriminator 1 view .LVU17
 129 0000 FEE7     		b	.L8
 130              		.cfi_endproc
 131              	.LFE133:
 133              		.section	.text.UsageFault_Handler,"ax",%progbits
 134              		.align	1
 135              		.global	UsageFault_Handler
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	UsageFault_Handler:
 141              	.LFB134:
 137:Src/stm32f4xx_it.c **** }
 138:Src/stm32f4xx_it.c **** 
 139:Src/stm32f4xx_it.c **** /**
 140:Src/stm32f4xx_it.c ****  * @brief This function handles Undefined instruction or illegal state.
 141:Src/stm32f4xx_it.c ****  */
 142:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 143:Src/stm32f4xx_it.c **** {
 142              		.loc 1 143 1 view -0
 143              		.cfi_startproc
 144              		@ Volatile: function does not return.
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.L10:
 144:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 145:Src/stm32f4xx_it.c **** 
 146:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 147:Src/stm32f4xx_it.c ****   while (1)
 149              		.loc 1 147 3 discriminator 1 view .LVU19
 148:Src/stm32f4xx_it.c ****   {
 149:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 150:Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 151:Src/stm32f4xx_it.c ****   }
 150              		.loc 1 151 3 discriminator 1 view .LVU20
 147:Src/stm32f4xx_it.c ****   {
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 16


 151              		.loc 1 147 9 discriminator 1 view .LVU21
 152 0000 FEE7     		b	.L10
 153              		.cfi_endproc
 154              	.LFE134:
 156              		.section	.text.DebugMon_Handler,"ax",%progbits
 157              		.align	1
 158              		.global	DebugMon_Handler
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	DebugMon_Handler:
 164              	.LFB135:
 152:Src/stm32f4xx_it.c **** }
 153:Src/stm32f4xx_it.c **** 
 154:Src/stm32f4xx_it.c **** /**
 155:Src/stm32f4xx_it.c ****  * @brief This function handles Debug monitor.
 156:Src/stm32f4xx_it.c ****  */
 157:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 158:Src/stm32f4xx_it.c **** {
 165              		.loc 1 158 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 159:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 160:Src/stm32f4xx_it.c **** 
 161:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 162:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 163:Src/stm32f4xx_it.c **** 
 164:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 165:Src/stm32f4xx_it.c **** }
 170              		.loc 1 165 1 view .LVU23
 171 0000 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE135:
 175              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 176              		.align	1
 177              		.global	EXTI3_IRQHandler
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 182              	EXTI3_IRQHandler:
 183              	.LFB136:
 166:Src/stm32f4xx_it.c **** 
 167:Src/stm32f4xx_it.c **** /******************************************************************************/
 168:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 169:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 170:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 171:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 172:Src/stm32f4xx_it.c **** /******************************************************************************/
 173:Src/stm32f4xx_it.c **** 
 174:Src/stm32f4xx_it.c **** /**
 175:Src/stm32f4xx_it.c ****  * @brief This function handles EXTI line3 interrupt.
 176:Src/stm32f4xx_it.c ****  */
 177:Src/stm32f4xx_it.c **** void EXTI3_IRQHandler(void)
 178:Src/stm32f4xx_it.c **** {
 184              		.loc 1 178 1 view -0
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 17


 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 08B5     		push	{r3, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 3, -8
 192              		.cfi_offset 14, -4
 179:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 0 */
 180:Src/stm32f4xx_it.c **** 
 181:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI3_IRQn 0 */
 182:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 193              		.loc 1 182 3 view .LVU25
 194 0002 0820     		movs	r0, #8
 195 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 196              	.LVL3:
 183:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 1 */
 184:Src/stm32f4xx_it.c **** 
 185:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI3_IRQn 1 */
 186:Src/stm32f4xx_it.c **** }
 197              		.loc 1 186 1 is_stmt 0 view .LVU26
 198 0008 08BD     		pop	{r3, pc}
 199              		.cfi_endproc
 200              	.LFE136:
 202              		.section	.text.EXTI4_IRQHandler,"ax",%progbits
 203              		.align	1
 204              		.global	EXTI4_IRQHandler
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 209              	EXTI4_IRQHandler:
 210              	.LFB137:
 187:Src/stm32f4xx_it.c **** 
 188:Src/stm32f4xx_it.c **** /**
 189:Src/stm32f4xx_it.c ****  * @brief This function handles EXTI line4 interrupt.
 190:Src/stm32f4xx_it.c ****  */
 191:Src/stm32f4xx_it.c **** void EXTI4_IRQHandler(void)
 192:Src/stm32f4xx_it.c **** {
 211              		.loc 1 192 1 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 08B5     		push	{r3, lr}
 216              	.LCFI2:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 3, -8
 219              		.cfi_offset 14, -4
 193:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 0 */
 194:Src/stm32f4xx_it.c **** 
 195:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI4_IRQn 0 */
 196:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 220              		.loc 1 196 3 view .LVU28
 221 0002 1020     		movs	r0, #16
 222 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 223              	.LVL4:
 197:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 1 */
 198:Src/stm32f4xx_it.c **** 
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 18


 199:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI4_IRQn 1 */
 200:Src/stm32f4xx_it.c **** }
 224              		.loc 1 200 1 is_stmt 0 view .LVU29
 225 0008 08BD     		pop	{r3, pc}
 226              		.cfi_endproc
 227              	.LFE137:
 229              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 230              		.align	1
 231              		.global	CAN1_RX0_IRQHandler
 232              		.syntax unified
 233              		.thumb
 234              		.thumb_func
 236              	CAN1_RX0_IRQHandler:
 237              	.LFB138:
 201:Src/stm32f4xx_it.c **** 
 202:Src/stm32f4xx_it.c **** /**
 203:Src/stm32f4xx_it.c ****  * @brief This function handles CAN1 RX0 interrupts.
 204:Src/stm32f4xx_it.c ****  */
 205:Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 206:Src/stm32f4xx_it.c **** {
 238              		.loc 1 206 1 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242 0000 08B5     		push	{r3, lr}
 243              	.LCFI3:
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 3, -8
 246              		.cfi_offset 14, -4
 207:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 208:Src/stm32f4xx_it.c **** 
 209:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 210:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 247              		.loc 1 210 3 view .LVU31
 248 0002 0248     		ldr	r0, .L18
 249 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 250              	.LVL5:
 211:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 212:Src/stm32f4xx_it.c **** 
 213:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 214:Src/stm32f4xx_it.c **** }
 251              		.loc 1 214 1 is_stmt 0 view .LVU32
 252 0008 08BD     		pop	{r3, pc}
 253              	.L19:
 254 000a 00BF     		.align	2
 255              	.L18:
 256 000c 00000000 		.word	hcan1
 257              		.cfi_endproc
 258              	.LFE138:
 260              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 261              		.align	1
 262              		.global	EXTI9_5_IRQHandler
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	EXTI9_5_IRQHandler:
 268              	.LFB139:
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 19


 215:Src/stm32f4xx_it.c **** 
 216:Src/stm32f4xx_it.c **** /**
 217:Src/stm32f4xx_it.c ****  * @brief This function handles EXTI line[9:5] interrupts.
 218:Src/stm32f4xx_it.c ****  */
 219:Src/stm32f4xx_it.c **** void EXTI9_5_IRQHandler(void)
 220:Src/stm32f4xx_it.c **** {
 269              		.loc 1 220 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 08B5     		push	{r3, lr}
 274              	.LCFI4:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 3, -8
 277              		.cfi_offset 14, -4
 221:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 0 */
 222:Src/stm32f4xx_it.c **** 
 223:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 0 */
 224:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 278              		.loc 1 224 3 view .LVU34
 279 0002 2020     		movs	r0, #32
 280 0004 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 281              	.LVL6:
 225:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 282              		.loc 1 225 3 view .LVU35
 283 0008 4020     		movs	r0, #64
 284 000a FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 285              	.LVL7:
 226:Src/stm32f4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 286              		.loc 1 226 3 view .LVU36
 287 000e 8020     		movs	r0, #128
 288 0010 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 289              	.LVL8:
 227:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 228:Src/stm32f4xx_it.c **** 
 229:Src/stm32f4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 1 */
 230:Src/stm32f4xx_it.c **** }
 290              		.loc 1 230 1 is_stmt 0 view .LVU37
 291 0014 08BD     		pop	{r3, pc}
 292              		.cfi_endproc
 293              	.LFE139:
 295              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 296              		.align	1
 297              		.global	TIM2_IRQHandler
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 302              	TIM2_IRQHandler:
 303              	.LFB140:
 231:Src/stm32f4xx_it.c **** 
 232:Src/stm32f4xx_it.c **** /**
 233:Src/stm32f4xx_it.c ****  * @brief This function handles TIM2 global interrupt.
 234:Src/stm32f4xx_it.c ****  */
 235:Src/stm32f4xx_it.c **** void TIM2_IRQHandler(void)
 236:Src/stm32f4xx_it.c **** {
 304              		.loc 1 236 1 is_stmt 1 view -0
 305              		.cfi_startproc
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 20


 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308 0000 08B5     		push	{r3, lr}
 309              	.LCFI5:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 3, -8
 312              		.cfi_offset 14, -4
 237:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 238:Src/stm32f4xx_it.c **** 
 239:Src/stm32f4xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 240:Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 313              		.loc 1 240 3 view .LVU39
 314 0002 0248     		ldr	r0, .L24
 315 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 316              	.LVL9:
 241:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 242:Src/stm32f4xx_it.c **** 
 243:Src/stm32f4xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 244:Src/stm32f4xx_it.c **** }
 317              		.loc 1 244 1 is_stmt 0 view .LVU40
 318 0008 08BD     		pop	{r3, pc}
 319              	.L25:
 320 000a 00BF     		.align	2
 321              	.L24:
 322 000c 00000000 		.word	htim2
 323              		.cfi_endproc
 324              	.LFE140:
 326              		.section	.text.USART1_IRQHandler,"ax",%progbits
 327              		.align	1
 328              		.global	USART1_IRQHandler
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 333              	USART1_IRQHandler:
 334              	.LFB141:
 245:Src/stm32f4xx_it.c **** 
 246:Src/stm32f4xx_it.c **** /**
 247:Src/stm32f4xx_it.c ****  * @brief This function handles USART1 global interrupt.
 248:Src/stm32f4xx_it.c ****  */
 249:Src/stm32f4xx_it.c **** void USART1_IRQHandler(void)
 250:Src/stm32f4xx_it.c **** {
 335              		.loc 1 250 1 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 08B5     		push	{r3, lr}
 340              	.LCFI6:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 251:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 252:Src/stm32f4xx_it.c ****   USART_IDLE_IRQHandler(&huart1);
 344              		.loc 1 252 3 view .LVU42
 345 0002 0248     		ldr	r0, .L28
 346 0004 FFF7FEFF 		bl	USART_IDLE_IRQHandler
 347              	.LVL10:
 253:Src/stm32f4xx_it.c ****   return;
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 21


 348              		.loc 1 253 3 view .LVU43
 254:Src/stm32f4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 255:Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 256:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 257:Src/stm32f4xx_it.c **** 
 258:Src/stm32f4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 259:Src/stm32f4xx_it.c **** }
 349              		.loc 1 259 1 is_stmt 0 view .LVU44
 350 0008 08BD     		pop	{r3, pc}
 351              	.L29:
 352 000a 00BF     		.align	2
 353              	.L28:
 354 000c 00000000 		.word	huart1
 355              		.cfi_endproc
 356              	.LFE141:
 358              		.section	.text.USART3_IRQHandler,"ax",%progbits
 359              		.align	1
 360              		.global	USART3_IRQHandler
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 365              	USART3_IRQHandler:
 366              	.LFB142:
 260:Src/stm32f4xx_it.c **** 
 261:Src/stm32f4xx_it.c **** /**
 262:Src/stm32f4xx_it.c ****  * @brief This function handles USART3 global interrupt.
 263:Src/stm32f4xx_it.c ****  */
 264:Src/stm32f4xx_it.c **** void USART3_IRQHandler(void)
 265:Src/stm32f4xx_it.c **** {
 367              		.loc 1 265 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371 0000 08B5     		push	{r3, lr}
 372              	.LCFI7:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 3, -8
 375              		.cfi_offset 14, -4
 266:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART3_IRQn 0 */
 267:Src/stm32f4xx_it.c ****   USART_IDLE_IRQHandler(&huart3);
 376              		.loc 1 267 3 view .LVU46
 377 0002 0248     		ldr	r0, .L32
 378 0004 FFF7FEFF 		bl	USART_IDLE_IRQHandler
 379              	.LVL11:
 268:Src/stm32f4xx_it.c ****   return;
 380              		.loc 1 268 3 view .LVU47
 269:Src/stm32f4xx_it.c ****   /* USER CODE END USART3_IRQn 0 */
 270:Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart3);
 271:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART3_IRQn 1 */
 272:Src/stm32f4xx_it.c **** 
 273:Src/stm32f4xx_it.c ****   /* USER CODE END USART3_IRQn 1 */
 274:Src/stm32f4xx_it.c **** }
 381              		.loc 1 274 1 is_stmt 0 view .LVU48
 382 0008 08BD     		pop	{r3, pc}
 383              	.L33:
 384 000a 00BF     		.align	2
 385              	.L32:
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 22


 386 000c 00000000 		.word	huart3
 387              		.cfi_endproc
 388              	.LFE142:
 390              		.section	.text.DMA2_Stream1_IRQHandler,"ax",%progbits
 391              		.align	1
 392              		.global	DMA2_Stream1_IRQHandler
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	DMA2_Stream1_IRQHandler:
 398              	.LFB143:
 275:Src/stm32f4xx_it.c **** 
 276:Src/stm32f4xx_it.c **** /**
 277:Src/stm32f4xx_it.c ****  * @brief This function handles DMA2 stream1 global interrupt.
 278:Src/stm32f4xx_it.c ****  */
 279:Src/stm32f4xx_it.c **** void DMA2_Stream1_IRQHandler(void)
 280:Src/stm32f4xx_it.c **** {
 399              		.loc 1 280 1 is_stmt 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0000 08B5     		push	{r3, lr}
 404              	.LCFI8:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 3, -8
 407              		.cfi_offset 14, -4
 281:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
 282:Src/stm32f4xx_it.c **** 
 283:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 0 */
 284:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_rx);
 408              		.loc 1 284 3 view .LVU50
 409 0002 0248     		ldr	r0, .L36
 410 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 411              	.LVL12:
 285:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
 286:Src/stm32f4xx_it.c **** 
 287:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 1 */
 288:Src/stm32f4xx_it.c **** }
 412              		.loc 1 288 1 is_stmt 0 view .LVU51
 413 0008 08BD     		pop	{r3, pc}
 414              	.L37:
 415 000a 00BF     		.align	2
 416              	.L36:
 417 000c 00000000 		.word	hdma_usart6_rx
 418              		.cfi_endproc
 419              	.LFE143:
 421              		.section	.text.CAN2_RX0_IRQHandler,"ax",%progbits
 422              		.align	1
 423              		.global	CAN2_RX0_IRQHandler
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 428              	CAN2_RX0_IRQHandler:
 429              	.LFB144:
 289:Src/stm32f4xx_it.c **** 
 290:Src/stm32f4xx_it.c **** /**
 291:Src/stm32f4xx_it.c ****  * @brief This function handles CAN2 RX0 interrupts.
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 23


 292:Src/stm32f4xx_it.c ****  */
 293:Src/stm32f4xx_it.c **** void CAN2_RX0_IRQHandler(void)
 294:Src/stm32f4xx_it.c **** {
 430              		.loc 1 294 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434 0000 08B5     		push	{r3, lr}
 435              	.LCFI9:
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
 295:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
 296:Src/stm32f4xx_it.c **** 
 297:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 0 */
 298:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 439              		.loc 1 298 3 view .LVU53
 440 0002 0248     		ldr	r0, .L40
 441 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 442              	.LVL13:
 299:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
 300:Src/stm32f4xx_it.c **** 
 301:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 1 */
 302:Src/stm32f4xx_it.c **** }
 443              		.loc 1 302 1 is_stmt 0 view .LVU54
 444 0008 08BD     		pop	{r3, pc}
 445              	.L41:
 446 000a 00BF     		.align	2
 447              	.L40:
 448 000c 00000000 		.word	hcan2
 449              		.cfi_endproc
 450              	.LFE144:
 452              		.section	.text.DMA2_Stream5_IRQHandler,"ax",%progbits
 453              		.align	1
 454              		.global	DMA2_Stream5_IRQHandler
 455              		.syntax unified
 456              		.thumb
 457              		.thumb_func
 459              	DMA2_Stream5_IRQHandler:
 460              	.LFB145:
 303:Src/stm32f4xx_it.c **** 
 304:Src/stm32f4xx_it.c **** /**
 305:Src/stm32f4xx_it.c ****  * @brief This function handles DMA2 stream5 global interrupt.
 306:Src/stm32f4xx_it.c ****  */
 307:Src/stm32f4xx_it.c **** void DMA2_Stream5_IRQHandler(void)
 308:Src/stm32f4xx_it.c **** {
 461              		.loc 1 308 1 is_stmt 1 view -0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 0000 08B5     		push	{r3, lr}
 466              	.LCFI10:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 3, -8
 469              		.cfi_offset 14, -4
 309:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
 310:Src/stm32f4xx_it.c **** 
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 24


 311:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream5_IRQn 0 */
 312:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 470              		.loc 1 312 3 view .LVU56
 471 0002 0248     		ldr	r0, .L44
 472 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 473              	.LVL14:
 313:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
 314:Src/stm32f4xx_it.c **** 
 315:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream5_IRQn 1 */
 316:Src/stm32f4xx_it.c **** }
 474              		.loc 1 316 1 is_stmt 0 view .LVU57
 475 0008 08BD     		pop	{r3, pc}
 476              	.L45:
 477 000a 00BF     		.align	2
 478              	.L44:
 479 000c 00000000 		.word	hdma_usart1_rx
 480              		.cfi_endproc
 481              	.LFE145:
 483              		.section	.text.DMA2_Stream6_IRQHandler,"ax",%progbits
 484              		.align	1
 485              		.global	DMA2_Stream6_IRQHandler
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 490              	DMA2_Stream6_IRQHandler:
 491              	.LFB146:
 317:Src/stm32f4xx_it.c **** 
 318:Src/stm32f4xx_it.c **** /**
 319:Src/stm32f4xx_it.c ****  * @brief This function handles DMA2 stream6 global interrupt.
 320:Src/stm32f4xx_it.c ****  */
 321:Src/stm32f4xx_it.c **** void DMA2_Stream6_IRQHandler(void)
 322:Src/stm32f4xx_it.c **** {
 492              		.loc 1 322 1 is_stmt 1 view -0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 0, uses_anonymous_args = 0
 496 0000 08B5     		push	{r3, lr}
 497              	.LCFI11:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 3, -8
 500              		.cfi_offset 14, -4
 323:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
 324:Src/stm32f4xx_it.c **** 
 325:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 0 */
 326:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_tx);
 501              		.loc 1 326 3 view .LVU59
 502 0002 0248     		ldr	r0, .L48
 503 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 504              	.LVL15:
 327:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
 328:Src/stm32f4xx_it.c **** 
 329:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 1 */
 330:Src/stm32f4xx_it.c **** }
 505              		.loc 1 330 1 is_stmt 0 view .LVU60
 506 0008 08BD     		pop	{r3, pc}
 507              	.L49:
 508 000a 00BF     		.align	2
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 25


 509              	.L48:
 510 000c 00000000 		.word	hdma_usart6_tx
 511              		.cfi_endproc
 512              	.LFE146:
 514              		.section	.text.DMA2_Stream7_IRQHandler,"ax",%progbits
 515              		.align	1
 516              		.global	DMA2_Stream7_IRQHandler
 517              		.syntax unified
 518              		.thumb
 519              		.thumb_func
 521              	DMA2_Stream7_IRQHandler:
 522              	.LFB147:
 331:Src/stm32f4xx_it.c **** 
 332:Src/stm32f4xx_it.c **** /**
 333:Src/stm32f4xx_it.c ****  * @brief This function handles DMA2 stream7 global interrupt.
 334:Src/stm32f4xx_it.c ****  */
 335:Src/stm32f4xx_it.c **** void DMA2_Stream7_IRQHandler(void)
 336:Src/stm32f4xx_it.c **** {
 523              		.loc 1 336 1 is_stmt 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527 0000 08B5     		push	{r3, lr}
 528              	.LCFI12:
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 3, -8
 531              		.cfi_offset 14, -4
 337:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
 338:Src/stm32f4xx_it.c **** 
 339:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream7_IRQn 0 */
 340:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 532              		.loc 1 340 3 view .LVU62
 533 0002 0248     		ldr	r0, .L52
 534 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 535              	.LVL16:
 341:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
 342:Src/stm32f4xx_it.c **** 
 343:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream7_IRQn 1 */
 344:Src/stm32f4xx_it.c **** }
 536              		.loc 1 344 1 is_stmt 0 view .LVU63
 537 0008 08BD     		pop	{r3, pc}
 538              	.L53:
 539 000a 00BF     		.align	2
 540              	.L52:
 541 000c 00000000 		.word	hdma_usart1_tx
 542              		.cfi_endproc
 543              	.LFE147:
 545              		.section	.text.USART6_IRQHandler,"ax",%progbits
 546              		.align	1
 547              		.global	USART6_IRQHandler
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 552              	USART6_IRQHandler:
 553              	.LFB148:
 345:Src/stm32f4xx_it.c **** 
 346:Src/stm32f4xx_it.c **** /**
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 26


 347:Src/stm32f4xx_it.c ****  * @brief This function handles USART6 global interrupt.
 348:Src/stm32f4xx_it.c ****  */
 349:Src/stm32f4xx_it.c **** void USART6_IRQHandler(void)
 350:Src/stm32f4xx_it.c **** {
 554              		.loc 1 350 1 is_stmt 1 view -0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558 0000 08B5     		push	{r3, lr}
 559              	.LCFI13:
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 3, -8
 562              		.cfi_offset 14, -4
 351:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART6_IRQn 0 */
 352:Src/stm32f4xx_it.c ****   USART_IDLE_IRQHandler(&huart6);
 563              		.loc 1 352 3 view .LVU65
 564 0002 0248     		ldr	r0, .L56
 565 0004 FFF7FEFF 		bl	USART_IDLE_IRQHandler
 566              	.LVL17:
 353:Src/stm32f4xx_it.c ****   return;
 567              		.loc 1 353 3 view .LVU66
 354:Src/stm32f4xx_it.c ****   /* USER CODE END USART6_IRQn 0 */
 355:Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart6);
 356:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART6_IRQn 1 */
 357:Src/stm32f4xx_it.c **** 
 358:Src/stm32f4xx_it.c ****   /* USER CODE END USART6_IRQn 1 */
 359:Src/stm32f4xx_it.c **** }
 568              		.loc 1 359 1 is_stmt 0 view .LVU67
 569 0008 08BD     		pop	{r3, pc}
 570              	.L57:
 571 000a 00BF     		.align	2
 572              	.L56:
 573 000c 00000000 		.word	huart6
 574              		.cfi_endproc
 575              	.LFE148:
 577              		.text
 578              	.Letext0:
 579              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 580              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 581              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 582              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 583              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 584              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 585              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 586              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 587              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 588              		.file 12 "Inc/usart.h"
 589              		.file 13 "Bsp/bsp_usart_idle.h"
 590              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 591              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_it.c
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:20     .text.NMI_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:26     .text.NMI_Handler:00000000 NMI_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:40     .text.HardFault_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:46     .text.HardFault_Handler:00000000 HardFault_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:88     .text.MemManage_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:94     .text.MemManage_Handler:00000000 MemManage_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:111    .text.BusFault_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:117    .text.BusFault_Handler:00000000 BusFault_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:134    .text.UsageFault_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:140    .text.UsageFault_Handler:00000000 UsageFault_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:157    .text.DebugMon_Handler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:163    .text.DebugMon_Handler:00000000 DebugMon_Handler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:176    .text.EXTI3_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:182    .text.EXTI3_IRQHandler:00000000 EXTI3_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:203    .text.EXTI4_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:209    .text.EXTI4_IRQHandler:00000000 EXTI4_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:230    .text.CAN1_RX0_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:236    .text.CAN1_RX0_IRQHandler:00000000 CAN1_RX0_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:256    .text.CAN1_RX0_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:261    .text.EXTI9_5_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:267    .text.EXTI9_5_IRQHandler:00000000 EXTI9_5_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:296    .text.TIM2_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:302    .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:322    .text.TIM2_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:327    .text.USART1_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:333    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:354    .text.USART1_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:359    .text.USART3_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:365    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:386    .text.USART3_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:391    .text.DMA2_Stream1_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:397    .text.DMA2_Stream1_IRQHandler:00000000 DMA2_Stream1_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:417    .text.DMA2_Stream1_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:422    .text.CAN2_RX0_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:428    .text.CAN2_RX0_IRQHandler:00000000 CAN2_RX0_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:448    .text.CAN2_RX0_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:453    .text.DMA2_Stream5_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:459    .text.DMA2_Stream5_IRQHandler:00000000 DMA2_Stream5_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:479    .text.DMA2_Stream5_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:484    .text.DMA2_Stream6_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:490    .text.DMA2_Stream6_IRQHandler:00000000 DMA2_Stream6_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:510    .text.DMA2_Stream6_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:515    .text.DMA2_Stream7_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:521    .text.DMA2_Stream7_IRQHandler:00000000 DMA2_Stream7_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:541    .text.DMA2_Stream7_IRQHandler:0000000c $d
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:546    .text.USART6_IRQHandler:00000000 $t
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:552    .text.USART6_IRQHandler:00000000 USART6_IRQHandler
C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s:573    .text.USART6_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_NVIC_SystemReset
HAL_GPIO_EXTI_IRQHandler
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
ARM GAS  C:\Users\86152\AppData\Local\Temp\cc8vLlyo.s 			page 28


htim2
USART_IDLE_IRQHandler
huart1
huart3
HAL_DMA_IRQHandler
hdma_usart6_rx
hcan2
hdma_usart1_rx
hdma_usart6_tx
hdma_usart1_tx
huart6
